# Node Express API

Esta es proyecto en continuidad de la version 2.1 que puedes conseguir en este mismo perfil de github, es API con una Base de Datos utilizando Node.js construida con Express.js y MongoDB. Proporciona endpoints para acceder a diferentes vistas con ejs en esta actividad se agregaron autenticacion por JWT, se separaron los accesos a la base de datos con .env y adicionalmente limitaciones por rol para algunas acciones dentro del sistema.

## Instalación

1. Clona el repositorio:
    ```bash
    git clone <repository-url>
    ```
2. Navega al directorio del proyecto:
    ```bash
    cd <project-directory>
    ```
3. Instala las dependencias:
    ```bash
    npm install
    ```
4. Debe crear el archivo .env  para conectar su data base
    MONGO_URI=
    SECRET_KEY= 
    NAME_DB=

## Ejecutando la API

Para iniciar el servidor, ejecuta el siguiente comando:
```bash
npm start
```

## Endpoints Disponibles para views

Puedes visitar las siguientes vistas a través de las URLs correspondientes:


- `/`: Login y Registrar
- `/home`: Proporciona la vistas se puede realizar un CRUD al modelo Publicaciones
- `/users`: Proporciona vistas para  realizar un CRUD al modelo USers

## Endpoints Disponibles para la API

La API proporciona los siguientes endpoints:

- `/api/users`: Gestiona las operaciones relacionadas con los usuarios.
    - `POST /`: Crea un nuevo usuario. (`router.post('/', Controller.createUser)`)
    ejemplo: "{
        "name": "david",
        "lastName": "Pérez",
        "email": "assd@gmail.com",
        "userName": "davidp",
        "password": "1234",
        "repassword": "1234"
    }"
    - `PUT /:id`: Actualiza un usuario existente. (`router.put('/:id', Controller.updateUser)`)
    - `DELETE /:id`: Elimina un usuario existente. (`router.delete('/:id', Controller.deleteUser)`)
    - `GET /:id`: Obtiene un usuario específico. (`router.get('/:id', Controller.getUser)`)
- `/api/publi`: Gestiona las operaciones relacionadas con las publicaciones.
    - `GET /`: Obtiene la lista de publicaciones. (`router.get('/', Controller.getPublicaciones)`)
    - `POST /`: Crea una nueva publicacion. (`router.post('/', Controller.createPublicacion)`)
    - `POST /comment`: Crea un comntario a la publicacion. (`router.post('/', Controller.createComentarioPubli)`)
    ejemplo: '"title": "nueva publiacion",
    "description": "descrip de la nueva publicacion",
    "urlMedia": "https://images-na.ssl-images-amazon.com/images/I/51y6qg0K2OL._SX331_BO1,204,203,200_.jpg",
    "idUser":"671c1ca60c52024715133ad2"}'
    - `PUT /:id`: Actualiza una publicacion. (`router.put('/:id', Controller.updatePublicacion)`)
    - `DELETE /:id`: Elimina una publiacion. (`router.delete('/:id', Controller.deletePubli)`)
    - `GET /:id`: Obtiene una específico. (`router.get('/:id', Controller.getPublicacion)`)
- `/api/amistad`: Gestiona las operaciones relacionadas con las amitasdes entre usuarios.
    - `GET /`: Obtiene la lista de solitudes totales de amistad. (`router.get('/', Controller.getSolicitudesAmistad)`)
    - `POST /`: Crea un nueva nueva solicitud de amistad. (`router.post('/', Controller.createSolicitudAmistad)`) debe enviarse el id del user que envia y el id del user al cual se le hace la solicitud de amistad
    - `PUT /:id`: Actualiza la solicitud de amistad. (`router.put('/:id', Controller.updateSolicitudAmistad)`) tambien se usa para aceptar amistad o para negar amistad
    - `Delete /:id`: Elimina la solicitud de amistad. (`router.get('/:id', Controller.deleteSolicitudAmistad)`)

    ## Propósito Educativo

    Esta actividad ha sido creada para uso educativo de la Universidad Valle del Momboy. El objetivo es desarrollar una API utilizando Node.js, JavaScript y Express.js, MongoDB.



    ## Autor

    - **Nombre:** Yuliana Abreu
    - **Correo Electrónico:** abreucarrilloyv@uvm.edu.ve
